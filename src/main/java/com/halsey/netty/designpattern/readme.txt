23 种设计模式：

    1 单例模式：适用于共享资源，而资源创建特别费劲，静态变量

    2 工厂模式： 有很多子类，或者创建实例时需要一些额外的操作比如 jdbc操作

    3 抽象工厂模式：涉及不同操作系统 一对对象族 都有公有的特性

    4 责任链模式：请求处理，形成对象链

    5 迭代模式：遍历实现

    6 命令模式：多级回退操作，用户界面的交互操作

    7 代理模式：面向切面编程

    8 观察者模式：订阅发布模式

    9 访问者模式：对象类很少，但操作一直变 为啦不加代码讲操作抽象出来  添加新的操作 指定不同的值

    10 创建者模式：一个对象的创建比较复杂涉及到很多小对象的创建，把这些对象的创建抽象出来

    11 适配器模式：对象 接口 类 根据需求将功能整合成一个类

    12 中介模式：大量对象复杂关系，变成个人与中介交互

    13 模板模式：定义一个模板，将实现放到子类

    14 装饰器模式：以一个父类实现接口 多个子类继承父类的方式，达到扩展更多的新功能

    15 解释器模式：实现同一个接口处理不同的计算公式

    16 状态模式：多个状态实现统一接口 通过不同的状态实现类 调用统一的方法 改变状态

    17 原型模式：例如一个对象创建的代价比较大时 深度拷贝  浅度拷贝 序列化 反序列化

    18 组合模式：文件目录组织   将文件和目录做一层抽象 组合在一起

    19 策略模式：多种实现一个接口，用一个context 注入 调用实现方法

    20 享元模式：将多次访问的资源  批量一次

    21 桥梁模式：画笔和颜色分离抽象   具体实现类 继承笔  set 颜色，实现画笔功能

    22 备忘录模式: 发起人备忘录 管理者 需要做回滚恢复

    23 门面模式:常用的封装模式系统内  功能封装成一个类 提供给系统外调用  api封装


设计原则：
    单一职责：一个类只实现该类单一的功能
    里氏替换: 使用父类的地方，一定可以换成其子类
    依赖倒置：上层模块不依赖于底层模块，只依赖于抽象 通过set get 构造方法注入
    开闭原则: 新的功能增加不改变其原有代码，只增加新的代码

